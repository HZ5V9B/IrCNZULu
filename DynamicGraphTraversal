"```python
class Node:
    def __init__(self, value, neighbours=None):
        self.value = value
        self.neighbours = neighbours if neighbours else []

    def add_neighbour(self, node):
        self.neighbours.append(node)

    def __repr__(self):
        return str(self.value)

class Graph:
    def __init__(self, nodes=None):
        self.nodes = nodes if nodes else []

    def add_node(self, node):
        self.nodes.append(node)

    def traverse(self, start_node, end_node):
        visited = set()
        queue = [[start_node]]
        
        if start_node == end_node:
            return f""Path found: {[node.value for node in queue[0]]}""

        visited.add(start_node)

        while queue:
            path = queue.pop(0)
            last_node = path[-1]

            if last_node == end_node:
                return f""Path found: {[node.value for node in path]}""

            for neighbour in last_node.neighbours:
                if neighbour not in visited:
                    new_path = list(path)
                    new_path.append(neighbour)
                    queue.append(new_path)
                    visited.add(neighbour)

        return ""No path found""

if __name__ == ""__main__"":
    nodes = [Node(i) for i in range(1, 7)]

    edges = [(1, 2), (1, 3), (2, 4), (4, 5), (6, 5), (3, 6), (6, 1)]

    graph = Graph(nodes)

    for edge in edges:
        graph.nodes[edge[0] - 1].add_neighbour(graph.nodes[edge[1] - 1])

    print(graph.traverse(nodes[0], nodes[4]))
    print(graph.traverse(nodes[1], nodes[5]))
```"
